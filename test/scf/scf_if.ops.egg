(include "src/base.egg")

;; Attrs
(datatype FastMathFlags (none) (reassoc) (nnan) (ninf) (nsz) (arcp) (contract) (afn) (fast))
(function arith_fastmath (FastMathFlags) Attr)

;; Ops
(function arith_constant (AttrPair Type) Op)
(function arith_cmpf (Op Op AttrPair AttrPair Type) Op)
(function scf_if (Op Region Region Type) Op)
(function scf_yield (Op) Op)
(function math_sqrt (Op AttrPair Type) Op)
(function arith_negf (Op AttrPair Type) Op)
(function func_return (Op) Op)

;; OPS HERE ;;
(let op0 (Value 0 (F32)))
(let op1 (arith_constant (NamedAttr "value" (FloatAttr 0.0 (F32))) (F32)))
(let op2 (arith_cmpf op0 op1 (NamedAttr "fastmath" (arith_fastmath (none))) (NamedAttr "predicate" (IntegerAttr 3 (I64))) (I1)))
(let op3 (math_sqrt op0 (NamedAttr "fastmath" (arith_fastmath (none))) (F32)))
(let op4 (scf_yield op3))
(let op5 (arith_negf op0 (NamedAttr "fastmath" (arith_fastmath (none))) (F32)))
(let op6 (math_sqrt op5 (NamedAttr "fastmath" (arith_fastmath (none))) (F32)))
(let op7 (scf_yield op6))
(let op8 (scf_if op2 (Reg (vec-of (Blk (vec-of op3 op4)))) (Reg (vec-of (Blk (vec-of op5 op6 op7)))) (F32)))
(let op9 (func_return op8))

;; RULES HERE ;;

;; EXTRACTS HERE ;;
(extract op4)
(extract op7)
(extract op9)
