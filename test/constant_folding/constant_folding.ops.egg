(include "src/base.egg")

;;;; arith dialect ;;;;
(function arith_constant (AttrPair Type) Op)
(function arith_addi (Op Op AttrPair Type) Op)

;; OPS HERE ;;
(let op0 (arith_constant (NamedAttr "value" (IntegerAttr 2 (I32))) (I32)))
(let op1 (arith_constant (NamedAttr "value" (IntegerAttr 3 (I32))) (I32)))
(let op2 (arith_addi op0 op1 (NamedAttr "overflowFlags" (OpaqueAttr "#arith.overflow<none>" "arith.overflow")) (I32)))
(let op3 (Value 3 (None)))

;; RULES HERE ;;
(ruleset rules)
(rewrite ; constant fold for arith.addi
    (arith_addi ; x + y
        (arith_constant (NamedAttr "value" (IntegerAttr ?x ?t)) ?t) ; x
        (arith_constant (NamedAttr "value" (IntegerAttr ?y ?t)) ?t) ; y
        ?a ?t)
    (arith_constant (NamedAttr "value" (IntegerAttr (+ ?x ?y) ?t)) ?t) ; x + y
    :ruleset rules
)

(run-schedule (saturate rules))

;; EXTRACTS HERE ;;
(extract op2)
