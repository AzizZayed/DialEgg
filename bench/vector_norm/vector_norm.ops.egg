(include "src/base.egg")

;;;; arith dialect ;;;;

;; Attrs
(datatype FastMathFlags (none) (reassoc) (nnan) (fast))
(function arith_fastmath (FastMathFlags) Attr)

;; Ops
(function arith_constant (AttrPair Type) Op)
(function arith_divf (Op Op AttrPair Type) Op)

;;;; math dialect ;;;;
(function math_sqrt (Op AttrPair Type) Op)

;;;; func dialect ;;;;
(function func_call (Op AttrPair Type) Op)

;; OPS HERE ;;
; normalize_vector_func.func
(let op0 (Value 0 (F32)))
(let op1 (Value 1 (F32)))
(let op2 (Value 2 (F32)))
(let op3 (arith_constant (NamedAttr "value" (FloatAttr 1.0 (F32))) (F32)))
(let op4 (Value 4 (F32)))
(let op5 (Value 5 (F32)))
(let op6 (Value 6 (F32)))
(let op7 (Value 7 (F32)))
(let op8 (Value 8 (F32)))
(let op9 (math_sqrt op8 (NamedAttr "fastmath" (arith_fastmath (fast))) (F32)))
(let op10 (arith_divf op3 op9 (NamedAttr "fastmath" (arith_fastmath (fast))) (F32)))
(let op11 (Value 11 (F32)))
(let op12 (Value 12 (F32)))
(let op13 (Value 13 (F32)))
(let op14 (Value 14 (None)))

;; RULES HERE ;;
(ruleset rules)

(rewrite
    (arith_divf 
        (arith_constant (NamedAttr "value" (FloatAttr 1.0 (F32))) (F32)) ; 1.0
        (math_sqrt ?x (NamedAttr "fastmath" (arith_fastmath (fast))) (F32)) ; sqrt(x) with fastmath<fast>
        (NamedAttr "fastmath" (arith_fastmath (fast))) (F32)) ; 1 / sqrt(x) with fastmath<fast>
    (func_call ?x (NamedAttr "callee" (SymbolRefAttr "fast_inv_sqrt")) (F32))
    :ruleset rules
)

(run-schedule (saturate rules))

;; EXTRACTS HERE ;;
(extract op10)
