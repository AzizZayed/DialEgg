(include "egg/base.egg")

;;;; arith dialect ;;;;

;; Attrs
(datatype FastMathFlags (none) (reassoc) (nnan) (ninf) (nsz) (arcp) (contract) (afn) (fast))
(function arith_fastmath (FastMathFlags) Attr)

(function arith_constant (AttrPair Type) Op)
(function arith_cmpf (Op Op AttrPair AttrPair Type) Op)
(function scf_if (Op Region Region Type) Op)
(function scf_yield (Op) Op)
(function math_sqrt (Op AttrPair Type) Op)
(function arith_negf (Op AttrPair Type) Op)

;; OPS HERE ;;
(let op0 (Value 0 (RankedTensor (vec-of 100 100) (I32)))) ; %0 = tensor.empty() : tensor<100x100xi32>
(let op1 (Value 1 (RankedTensor (vec-of 100 100) (I32)))) ; %1 = tensor.empty() : tensor<100x100xi32>
(let op2 (Value 2 (RankedTensor (vec-of 100 100) (I32)))) ; %2 = tensor.empty() : tensor<100x100xi32>
(let op3 (Value 3 (RankedTensor (vec-of 100 100) (I32)))) ; %3 = tensor.empty() : tensor<100x100xi32>
(let op4 (Value 4 (RankedTensor (vec-of 100 100) (I32)))) ; %4 = linalg.matmul ins(%0, %1 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%3 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op5 (Value 5 (RankedTensor (vec-of 100 100) (I32)))) ; %5 = tensor.empty() : tensor<100x100xi32>
(let op6 (Value 6 (RankedTensor (vec-of 100 100) (I32)))) ; %6 = linalg.matmul ins(%4, %2 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%5 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op7 (arith_constant (NamedAttr "value" (IntegerAttr 0 (I32))) (I32))) ; %c0_i32 = arith.constant 0 : i32
(let op8 (Value 8 (None))) ; func.return %c0_i32 : i32

;; RULES HERE ;;

;; EXTRACTS HERE ;;
(extract op7)
