(include "egg/base.egg")

;;;; arith dialect ;;;;

;; Attrs
(datatype FastMathFlags (none) (reassoc) (nnan) (ninf) (nsz) (arcp) (contract) (afn) (fast))
(function arith_fastmath (FastMathFlags) Attr)

(function arith_constant (AttrPair Type) Op)
(function arith_cmpf (Op Op AttrPair AttrPair Type) Op)
(function scf_if (Op Region Region Type) Op)
(function math_sqrt (Op AttrPair Type) Op)
(function arith_negf (Op AttrPair Type) Op)

;; OPS HERE ;;
(let op0 (Value 0 (I64))) ; %0 = func.call @clock() : () -> i64
(let op1 (Value 1 (RankedTensor (vec-of 500 50) (I64)))) ; %1 = tensor.empty() : tensor<500x50xi64>
(let op2 (Value 2 (RankedTensor (vec-of 50 500) (I64)))) ; %2 = tensor.empty() : tensor<50x500xi64>
(let op3 (Value 3 (RankedTensor (vec-of 500 50) (I64)))) ; %3 = tensor.empty() : tensor<500x50xi64>
(let op4 (Value 4 (RankedTensor (vec-of 50 15) (I64)))) ; %4 = tensor.empty() : tensor<50x15xi64>
(let op5 (Value 5 (RankedTensor (vec-of 500 500) (I64)))) ; %5 = tensor.empty() : tensor<500x500xi64>
(let op6 (Value 6 (RankedTensor (vec-of 500 500) (I64)))) ; %6 = linalg.matmul ins(%1, %2 : tensor<500x50xi64>, tensor<50x500xi64>) outs(%5 : tensor<500x500xi64>) -> tensor<500x500xi64>
(let op7 (Value 7 (RankedTensor (vec-of 500 50) (I64)))) ; %7 = tensor.empty() : tensor<500x50xi64>
(let op8 (Value 8 (RankedTensor (vec-of 500 50) (I64)))) ; %8 = linalg.matmul ins(%6, %3 : tensor<500x500xi64>, tensor<500x50xi64>) outs(%7 : tensor<500x50xi64>) -> tensor<500x50xi64>
(let op9 (Value 9 (RankedTensor (vec-of 500 15) (I64)))) ; %9 = tensor.empty() : tensor<500x15xi64>
(let op10 (Value 10 (RankedTensor (vec-of 500 15) (I64)))) ; %10 = linalg.matmul ins(%8, %4 : tensor<500x50xi64>, tensor<50x15xi64>) outs(%9 : tensor<500x15xi64>) -> tensor<500x15xi64>
(let op11 (Value 11 (I64))) ; %11 = func.call @clock() : () -> i64
(let op12 (Value 12 (RankedTensor (vec-of 500 15) (I64)))) ; %12 = func.call @blackhole(%10) : (tensor<500x15xi64>) -> tensor<500x15xi64>
(let op13 (arith_constant (NamedAttr "value" (IntegerAttr 0 (I32))) (I32))) ; %c0_i32 = arith.constant 0 : i32

;; RULES HERE ;;

;; EXTRACTS HERE ;;
(extract op13)
