(datatype Type (F64) (I64) (Matrix i64 i64 Type))
(datatype Expr (Var String Type) (Mul Expr Expr Type))

(function type-of (Expr) Type)
(rule ((= ?e (Var ?name ?t))) ((set (type-of ?e) ?t)))
(rule ((= ?e (Mul ?x ?y ?t))) ((set (type-of ?e) ?t)))

(rule ; cost(XY) = abc
    ((= ?m (Mul ?x ?y (Matrix ?a ?c ?t)))
     (= (type-of ?x) (Matrix ?a ?b ?t))
     (= (type-of ?y) (Matrix ?b ?c ?t)))
    ((unstable-cost (Mul ?x ?y (Matrix ?a ?c ?t) ) (* (* ?a ?b) ?c)))
)

(rule ; associativity: (xy)z = x(yz)
    ((= ?e (Mul (Mul ?x ?y (Matrix ?a ?c ?t)) ?z (Matrix ?a ?d ?t)))
     (= (type-of ?x) (Matrix ?a ?b ?t))
     (= (type-of ?y) (Matrix ?b ?c ?t))
     (= (type-of ?z) (Matrix ?c ?d ?t)))
    ((union ?e (Mul ?x (Mul ?y ?z (Matrix ?b ?d ?t)) (Matrix ?a ?d ?t))))
)

(let x (Var "x" (Matrix 90 15 (F64)))) ; a*b
(let y (Var "y" (Matrix 15 90 (F64)))) ; b*c
(let z (Var "z" (Matrix 90 25 (F64)))) ; c*d
(let w (Var "w" (Matrix 25 10 (F64)))) ; d*e

(let xy (Mul x y (Matrix 90 90 (F64))))
(let yz (Mul y z (Matrix 15 25 (F64))))
(let xy_z (Mul xy z (Matrix 90 25 (F64)))) ; (XY)Z
(let x_yz (Mul x yz (Matrix 90 25 (F64)))) ; X(YZ)

(let zw (Mul z w (Matrix 90 10 (F64))))
(let y_zw (Mul y zw (Matrix 15 10 (F64)))) ; (YZ)W
(let yz_w (Mul yz w (Matrix 15 10 (F64)))) ; (YZ)W

(let xy_z__w (Mul xy_z w (Matrix 90 10 (F64)))) ; ((XY)Z) W
(let x_yz__w (Mul x_yz w (Matrix 90 10 (F64)))) ; (X(YZ)) W
(let x__yz_w (Mul x yz_w (Matrix 90 10 (F64)))) ; X ((YZ)W)
(let x__y_zw (Mul x y_zw (Matrix 90 10 (F64)))) ; X (Y(ZW))
(let xy__zw (Mul xy zw (Matrix 90 10 (F64)))) ; (XY) (ZW)

(run 151)

(extract xy_z__w)
(extract x_yz__w)
(extract x__yz_w)
(extract x__y_zw)
(extract xy__zw)