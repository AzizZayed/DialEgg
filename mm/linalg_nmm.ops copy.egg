(include "egg/base.egg")

;;;; linalg dialect ;;;;
(function linalg_matmul (Op Op Op Type) Op)

;;;; tensor dialect ;;;;
(function tensor_empty (Type) Op)

;; OPS HERE ;;
(let op0 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %0 = tensor.empty() : tensor<100x100xi32>
(let op1 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %1 = tensor.empty() : tensor<100x100xi32>
(let op2 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %2 = tensor.empty() : tensor<100x100xi32>
(let op3 (linalg_matmul op0 op1 op2 (RankedTensor (vec-of 100 100) (I32)))) ; %3 = linalg.matmul ins(%0, %1 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%2 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op4 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %4 = tensor.empty() : tensor<100x100xi32>
(let op5 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %5 = tensor.empty() : tensor<100x100xi32>
(let op6 (linalg_matmul op3 op4 op5 (RankedTensor (vec-of 100 100) (I32)))) ; %6 = linalg.matmul ins(%3, %4 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%5 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op7 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %7 = tensor.empty() : tensor<100x100xi32>
(let op8 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %8 = tensor.empty() : tensor<100x100xi32>
(let op9 (linalg_matmul op6 op7 op8 (RankedTensor (vec-of 100 100) (I32)))) ; %9 = linalg.matmul ins(%6, %7 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%8 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op10 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %10 = tensor.empty() : tensor<100x100xi32>
(let op11 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %11 = tensor.empty() : tensor<100x100xi32>
(let op12 (linalg_matmul op9 op10 op11 (RankedTensor (vec-of 100 100) (I32)))) ; %12 = linalg.matmul ins(%9, %10 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%11 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op13 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %13 = tensor.empty() : tensor<100x100xi32>
(let op14 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %14 = tensor.empty() : tensor<100x100xi32>
(let op15 (linalg_matmul op12 op13 op14 (RankedTensor (vec-of 100 100) (I32)))) ; %15 = linalg.matmul ins(%12, %13 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%14 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op16 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %16 = tensor.empty() : tensor<100x100xi32>
(let op17 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %17 = tensor.empty() : tensor<100x100xi32>
(let op18 (linalg_matmul op15 op16 op17 (RankedTensor (vec-of 100 100) (I32)))) ; %18 = linalg.matmul ins(%15, %16 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%17 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op19 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %19 = tensor.empty() : tensor<100x100xi32>
(let op20 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %20 = tensor.empty() : tensor<100x100xi32>
(let op21 (linalg_matmul op18 op19 op20 (RankedTensor (vec-of 100 100) (I32)))) ; %21 = linalg.matmul ins(%18, %19 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%20 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op22 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %22 = tensor.empty() : tensor<100x100xi32>
(let op23 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %23 = tensor.empty() : tensor<100x100xi32>
(let op24 (linalg_matmul op21 op22 op23 (RankedTensor (vec-of 100 100) (I32)))) ; %24 = linalg.matmul ins(%21, %22 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%23 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op25 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %25 = tensor.empty() : tensor<100x100xi32>
(let op26 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %26 = tensor.empty() : tensor<100x100xi32>
(let op27 (linalg_matmul op24 op25 op26 (RankedTensor (vec-of 100 100) (I32)))) ; %27 = linalg.matmul ins(%24, %25 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%26 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op28 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %28 = tensor.empty() : tensor<100x100xi32>
(let op29 (tensor_empty (RankedTensor (vec-of 100 100) (I32)))) ; %29 = tensor.empty() : tensor<100x100xi32>
(let op30 (linalg_matmul op27 op28 op29 (RankedTensor (vec-of 100 100) (I32)))) ; %30 = linalg.matmul ins(%27, %28 : tensor<100x100xi32>, tensor<100x100xi32>) outs(%29 : tensor<100x100xi32>) -> tensor<100x100xi32>
(let op31 (Value 31 (RankedTensor (vec-of 100 100) (I32)))) ; %31 = func.call @blackhole(%30) : (tensor<100x100xi32>) -> tensor<100x100xi32>
(let op32 (Value 32 (I32))) ; %c0_i32 = arith.constant 0 : i32
(let op33 (Value 33 (None))) ; func.return %c0_i32 : i32

;; RULES HERE ;;
(ruleset rules)

(rule ((= ?A (tensor_empty ?t))) ((set (type-of ?A) ?t)) :ruleset rules)
(rule ((= ?A (linalg_matmul ?x ?y ?o ?t))) ((set (type-of ?A) ?t)) :ruleset rules)

(function nrows (Type) i64)
(function ncols (Type) i64)
(rule ((= ?t (RankedTensor ?shape ?tp))) 
    ((set (nrows ?t) (vec-get ?shape 0)) 
     (set (ncols ?t) (vec-get ?shape 1)))
    :ruleset rules
)

(rule 
    ((linalg_matmul ?x ?y ?xy ?t)
     (= a (nrows (type-of ?x)))
     (= b (ncols (type-of ?x)))
     (= c (ncols (type-of ?y))))

    ((unstable-cost (linalg_matmul ?x ?y ?xy ?t) (* (* a b) c)))
    :ruleset rules
)

(rule
    ((= ?lhs (linalg_matmul (linalg_matmul ?x ?y ?xy ?xy_t) ?z ?xy_z ?xyz_t))
     (= ?b (nrows (type-of ?y)))
     (= ?d (ncols (type-of ?z)))
     (= ?xyz_t (RankedTensor ? ?t)))
    
    ((let out_t (RankedTensor (vec-of ?b ?d) ?t))
     (union ?lhs (linalg_matmul ?x (linalg_matmul ?y ?z (tensor_empty out_t) out_t) ?xy_z ?xyz_t)))
    :ruleset rules
)

(run-schedule (saturate rules))
; (run 10000)

;; EXTRACTS HERE ;;
(extract op0)
(extract op1)
(extract op2)
(extract op3)
(extract op4)
(extract op5)
(extract op6)
(extract op7)
(extract op8)
(extract op9)
(extract op10)
(extract op11)
(extract op12)
(extract op13)
(extract op14)
(extract op15)
(extract op16)
(extract op17)
(extract op18)
(extract op19)
(extract op20)
(extract op21)
(extract op22)
(extract op23)
(extract op24)
(extract op25)
(extract op26)
(extract op27)
(extract op28)
(extract op29)
(extract op30)
